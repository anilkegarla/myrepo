pipeline {

    agent any
	
    tools {
	
        maven 'apache-maven-3.8.7' 
    }
    stages {
	    
        stage('code clone') {
            steps { 
			git branch: 'main', credentialsId: 'Git', url: 'https://github.com/anilkegarla/myrepo.git'
			}
			}
      
		stage('Unit testing') {  
            steps {
                sh 'mvn test'
            }
        }
		stage('Integration testing'){
            
            steps{
                
                   sh 'mvn verify -DskipUnitTests'
                    
              }
               
        }
		
		
        
        stage('maven package') {
            steps {
                sh 'mvn clean install'
            }
        }
		stage('Static code analysis'){
            
            steps {
			
			script{
                
          
                    withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                        
                        sh 'mvn clean package sonar:sonar'
                  
                  }
                  }}}
				  
		stage('Quality Gates Status'){ 
		
           steps { 
          
		      waitForQualityGate abortPipeline: false, credentialsId: 'sonar-api-key'
            
			   

        }}
		
        stage('Upload War files to nexus') {
		
            steps {
			    script { 
				
				        def readPomVersion = readMavenPom file: 'pom.xml'
				        
				        
				        def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ?  "demo-snapshot" : "demo-release" 

				
				 
            
			nexusArtifactUploader artifacts: [[artifactId: 'ks', classifier: '', file: 'target/anil.war', type: 'war']], 
			credentialsId: 'nexus-auth',
			groupId: 'com.ksapp', 
			nexusUrl: '3.138.188.64:8081', 
			nexusVersion: 'nexus3', 
			protocol: 'http', 
			repository: 'nexusRepo', 
			version: "${readPomVersion.version}"
			  
			  
			  }
            
			}
			
        }
		
       stage('Docker image build'){
        steps{
            sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
            sh 'docker image tag $JOB_NAME:v1.BUILD_ID anilkumarkegarla/$JOB_NAME:V1.$BUILD_ID'
            sh 'docker image tag $JOB_NAME:v1.BUILD_ID anilkumarkegarla/$JOB_NAME:latest'
          }
        }      
       
      stage ('Push docker image to dockerhub'){
        steps{
		
		}
       }

		
		
    }
}
